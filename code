@@ -1,249 +1 @@
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Identifying Duplicate Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Over 100 million people visit Quora every month, so it's no surprise that many people ask similar (or the same) questions. Various questions with the same intent can cause people to spend extra time searching for the best answer to their question, and results in members answering multiple versions of the same question. Quora uses random forest to identify duplicated questions to provide a better experience to active seekers and writers, and offer more value to both of these groups in the long term.\n",
    "Follow the steps outlined below to build the appropriate classifier model. \n",
    "\n",
    "\n",
    "Steps:\n",
    "- Download data\n",
    "- Exploration\n",
    "- Cleaning\n",
    "- Feature Engineering\n",
    "- Modeling\n",
    "\n",
    "By the end of this project you should have **a presentation that describes the model you built** and its **performance**. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\".../train.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Note\n",
    "There is no designated test.csv file. The train.csv file is the entire dataset. Part of the data in the train.csv file should be set aside to act as the final testing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cleaning\n",
    "\n",
    "- Tokenization\n",
    "- Stopwords cleaning\n",
    "- Removing punctuation\n",
    "- Normalizing\n",
    "- Stemming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering\n",
    "\n",
    "- tf-idf\n",
    "- word2vec\n",
    "- word count\n",
    "- number of the same words in both questions\n",
    "- ...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modeling\n",
    "\n",
    "Different modeling techniques can be used:\n",
    "\n",
    "- logistic regression\n",
    "- XGBoost\n",
    "- LSTMs\n",
    "- etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
{"cells":[{"cell_type":"markdown","metadata":{"id":"iPd6oKoKwvpl"},"source":["## Identifying Duplicate Questions"]},{"cell_type":"markdown","metadata":{"id":"LiXKTPOrwvpn"},"source":["Over 100 million people visit Quora every month, so it's no surprise that many people ask similar (or the same) questions. Various questions with the same intent can cause people to spend extra time searching for the best answer to their question, and results in members answering multiple versions of the same question. Quora uses random forest to identify duplicated questions to provide a better experience to active seekers and writers, and offer more value to both of these groups in the long term.\n","Follow the steps outlined below to build the appropriate classifier model. \n","\n","\n","Steps:\n","- Download data\n","- Exploration\n","- Cleaning\n","- Feature Engineering\n","- Modeling\n","\n","By the end of this project you should have **a presentation that describes the model you built** and its **performance**. \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hASdanKQwvpn"},"outputs":[],"source":["import pandas as pd\n","from google.colab import drive\n","import numpy as np"]},{"cell_type":"code","source":["drive.mount('/content/drive', force_remount=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UNLd5Nz9w45v","executionInfo":{"status":"ok","timestamp":1678766170012,"user_tz":420,"elapsed":24025,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"59346479-9d7c-4f21-ace3-296bddb87300"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zDnao2ZQwvpo"},"outputs":[],"source":["df = pd.read_csv('/content/drive/My Drive/projects/Quora/train.csv')"]},{"cell_type":"markdown","metadata":{"id":"zm05tY5hwvpo"},"source":["#### Note\n","There is no designated test.csv file. The train.csv file is the entire dataset. Part of the data in the train.csv file should be set aside to act as the final testing data."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PZRLRCOkwvpo"},"outputs":[],"source":["from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","metadata":{"id":"MKbGrPzpwvpo"},"source":["### Exploration"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":240},"id":"-gHjlmqIwvpp","executionInfo":{"status":"ok","timestamp":1678766180561,"user_tz":420,"elapsed":391,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"5c25e44b-a802-4c28-cc7c-5280687f77a7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                           question1  \\\n","0  What is the step by step guide to invest in sh...   \n","1  What is the story of Kohinoor (Koh-i-Noor) Dia...   \n","2  How can I increase the speed of my internet co...   \n","\n","                                           question2  is_duplicate  \n","0  What is the step by step guide to invest in sh...             0  \n","1  What would happen if the Indian government sto...             0  \n","2  How can Internet speed be increased by hacking...             0  "],"text/html":["\n","  <div id=\"df-432a863a-3b40-4ef2-9161-9a098b40a73f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question1</th>\n","      <th>question2</th>\n","      <th>is_duplicate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>What is the step by step guide to invest in sh...</td>\n","      <td>What is the step by step guide to invest in sh...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>What is the story of Kohinoor (Koh-i-Noor) Dia...</td>\n","      <td>What would happen if the Indian government sto...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>How can I increase the speed of my internet co...</td>\n","      <td>How can Internet speed be increased by hacking...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-432a863a-3b40-4ef2-9161-9a098b40a73f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-432a863a-3b40-4ef2-9161-9a098b40a73f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-432a863a-3b40-4ef2-9161-9a098b40a73f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["df[['question1','question2','is_duplicate']].head(3)"]},{"cell_type":"code","source":["df[['question1','question2','is_duplicate']].tail(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":222},"id":"Ng-3-hiECV2m","executionInfo":{"status":"ok","timestamp":1678766180561,"user_tz":420,"elapsed":4,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"f83f7835-89e7-47c5-d714-a81a525897e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                question1  \\\n","404287                                  What is one coin?   \n","404288  What is the approx annual cost of living while...   \n","404289              What is like to have sex with cousin?   \n","\n","                                                question2  is_duplicate  \n","404287                                  What's this coin?             0  \n","404288  I am having little hairfall problem but I want...             0  \n","404289      What is it like to have sex with your cousin?             0  "],"text/html":["\n","  <div id=\"df-260a7578-9fcd-41ed-98b6-553da0d46673\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question1</th>\n","      <th>question2</th>\n","      <th>is_duplicate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>404287</th>\n","      <td>What is one coin?</td>\n","      <td>What's this coin?</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>404288</th>\n","      <td>What is the approx annual cost of living while...</td>\n","      <td>I am having little hairfall problem but I want...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>404289</th>\n","      <td>What is like to have sex with cousin?</td>\n","      <td>What is it like to have sex with your cousin?</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-260a7578-9fcd-41ed-98b6-553da0d46673')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-260a7578-9fcd-41ed-98b6-553da0d46673 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-260a7578-9fcd-41ed-98b6-553da0d46673');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["Some Samples seem incorrectly labelled. A fix to this would take a lot of time but if we had more time for the project would definetly be worth it. It doesn't seem like there's too many incorrectly labelled so for our little project it shouldn't cause too much confusion."],"metadata":{"id":"iWS90SIFCbQk"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KxOAu5rXwvpp","executionInfo":{"status":"ok","timestamp":1678766181071,"user_tz":420,"elapsed":514,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"8942acc7-c619-4215-dfb9-69daa359956a"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 404290 entries, 0 to 404289\n","Data columns (total 6 columns):\n"," #   Column        Non-Null Count   Dtype \n","---  ------        --------------   ----- \n"," 0   id            404290 non-null  int64 \n"," 1   qid1          404290 non-null  int64 \n"," 2   qid2          404290 non-null  int64 \n"," 3   question1     404289 non-null  object\n"," 4   question2     404288 non-null  object\n"," 5   is_duplicate  404290 non-null  int64 \n","dtypes: int64(4), object(2)\n","memory usage: 18.5+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Eo1GTWqwvpp","executionInfo":{"status":"ok","timestamp":1678766183756,"user_tz":420,"elapsed":2687,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"39253686-fca9-4d0f-b2b5-7f624c954579"},"outputs":[{"output_type":"stream","name":"stdout","text":["is_duplicate == 0 count: 255027 \n","is_duplicate == 1 count: 149263\n","percent of samples where is_duplicate == 1: 0.369197853026293\n"]}],"source":["print('is_duplicate == 0 count:', df[df.is_duplicate == 0].count()[0], '\\nis_duplicate == 1 count:', df[df.is_duplicate == 1].count()[0])\n","print('percent of samples where is_duplicate == 1:', df[df.is_duplicate == 1].count()[0]/df.count()[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156},"id":"ptIeMuyewvpp","executionInfo":{"status":"ok","timestamp":1678766183983,"user_tz":420,"elapsed":4,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"61c4c751-bde1-4b40-caa3-58cb1a95cda4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            id    qid1    qid2                         question1 question2  \\\n","105780  105780  174363  174364    How can I develop android app?       NaN   \n","201841  201841  303951  174364  How can I create an Android app?       NaN   \n","\n","        is_duplicate  \n","105780             0  \n","201841             0  "],"text/html":["\n","  <div id=\"df-ec905c81-9668-4c77-985c-d75262af0bd2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>qid1</th>\n","      <th>qid2</th>\n","      <th>question1</th>\n","      <th>question2</th>\n","      <th>is_duplicate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>105780</th>\n","      <td>105780</td>\n","      <td>174363</td>\n","      <td>174364</td>\n","      <td>How can I develop android app?</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>201841</th>\n","      <td>201841</td>\n","      <td>303951</td>\n","      <td>174364</td>\n","      <td>How can I create an Android app?</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec905c81-9668-4c77-985c-d75262af0bd2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ec905c81-9668-4c77-985c-d75262af0bd2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ec905c81-9668-4c77-985c-d75262af0bd2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}],"source":["df[df.question2.isnull()]"]},{"cell_type":"markdown","metadata":{"id":"rNCeW7RMwvpp"},"source":["### Cleaning\n","\n","- Tokenization\n","- Stopwords cleaning\n","- Removing punctuation\n","- Normalizing\n","- Stemming"]},{"cell_type":"code","source":["df = df.dropna()"],"metadata":{"id":"qLDF-4fo0HVo"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V4qm1ZFHwvpp"},"outputs":[],"source":["from drive.MyDrive.modules import nlp_cleaning as cleaner"]},{"cell_type":"code","source":["import nltk\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","nltk.download('omw-1.4')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zbOvtgbW3mOM","executionInfo":{"status":"ok","timestamp":1678766188849,"user_tz":420,"elapsed":1581,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"97c414c5-113b-4766-bc23-148a508636de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g9JkRitFwvpq"},"outputs":[],"source":["df['question1Clean'] = cleaner.preprocess(df.question1)\n","df['question2Clean'] = cleaner.preprocess(df.question2)\n","\n","# preprocess removes punctuation, stopwords, and converts to lowercase"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AGgMvcv1wvpq"},"outputs":[],"source":["\n","df['question1Lem'] = df.question1Clean.apply(cleaner.lematize_words)\n","df['question2Lem'] = df.question2Clean.apply(cleaner.lematize_words)\n","\n","# The dataset it small so we can use a lemmatizer over a stemmer."]},{"cell_type":"code","source":["df[df.question1Lem == df.question2Lem].is_duplicate.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"svmWHXPR8vgm","executionInfo":{"status":"ok","timestamp":1678766354893,"user_tz":420,"elapsed":186,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"82b929e4-693a-4b6a-b7a9-998c2939c8fa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    16053\n","0     4297\n","Name: is_duplicate, dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["This will lead to confusion. We may need a more considerate cleaning process but first I'll expirement with this data."],"metadata":{"id":"e_DL3c0NOHZl"}},{"cell_type":"markdown","metadata":{"id":"t7db-g0vwvpq"},"source":["### Feature Engineering\n","\n","- tf-idf\n","- word2vec\n","- word count\n","- number of the same words in both questions\n","- ...."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KEofwuc7wvpq"},"outputs":[],"source":["Y = df.is_duplicate"]},{"cell_type":"code","source":["#tmp = df.apply(lambda x: ' '.join([x['question1'], x['question2'], x['question1Lem'], x['question2Lem']]), axis=1)\n","tmp = df.apply(lambda x: ' '.join([x['question1Lem'], x['question2Lem']]), axis=1)"],"metadata":{"id":"2ByILRmgVix2"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j0NgAKa1wvpq","executionInfo":{"status":"ok","timestamp":1678766368061,"user_tz":420,"elapsed":7992,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"f9b7be96-4f82-41a8-e560-0d39b89cc722"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(404287, 1000)"]},"metadata":{},"execution_count":18}],"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","vectorizer = TfidfVectorizer(max_features=1000)\n","X = vectorizer.fit_transform(tmp.tolist())\n","X.shape"]},{"cell_type":"markdown","metadata":{"id":"PFwExANVwvpq"},"source":["### Modeling\n","\n","Different modeling techniques can be used:\n","\n","- logistic regression\n","- XGBoost\n","- LSTMs\n","- etc"]},{"cell_type":"markdown","source":["# XGBoost First"],"metadata":{"id":"ZgFFnBB-dG6Q"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"7dpiAGtBwvpr"},"outputs":[],"source":["from xgboost import XGBClassifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Inh6wCyzwvpr"},"outputs":[],"source":["xgb = XGBClassifier()\n","X_train, X_test, y_train, y_test = train_test_split(X, Y)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y6U9byLqwvpr"},"outputs":[],"source":["xgb.fit(X_train,y_train)"]},{"cell_type":"code","source":["vectorizer.get_feature_names_out()[50:100]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YpZJmT4Zx-t0","executionInfo":{"status":"ok","timestamp":1678766441869,"user_tz":420,"elapsed":4,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"42b248b2-62ed-42eb-b64c-a25cd8cdb89a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['anxiety', 'anyone', 'anything', 'app', 'apple', 'application',\n","       'apply', 'apps', 'area', 'army', 'around', 'art', 'asian', 'ask',\n","       'asked', 'atheist', 'attack', 'australia', 'available', 'average',\n","       'avoid', 'away', 'baby', 'back', 'bad', 'balance', 'ball', 'ban',\n","       'bang', 'bangalore', 'bank', 'banning', 'based', 'basic',\n","       'battery', 'battle', 'beautiful', 'become', 'beginner', 'behind',\n","       'believe', 'belly', 'benefit', 'best', 'better', 'big', 'biggest',\n","       'bike', 'bill', 'birthday'], dtype=object)"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iadakYfwwvpr"},"outputs":[],"source":["pred = xgb.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oVGVd6mUwvpr","executionInfo":{"status":"ok","timestamp":1678766442644,"user_tz":420,"elapsed":162,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"4dd97d29-f4d5-4188-b8d7-7160b4cfeaac"},"outputs":[{"output_type":"stream","name":"stdout","text":["~~~~{Confusion}~~~~\n"," [[60057  3655]\n"," [24371 12989]]\n","\n","~~~~{roc score}~~~~\n"," 0.6451518886649451\n","\n","~~~~{accuracy}~~~~~\n"," 0.7227125217666613\n","\n","~~~~{precision}~~~~\n"," 0.7804013458303293\n","\n","~~~~{f1  score}~~~~\n"," 0.4810384415969187\n"]}],"source":["from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, f1_score, roc_auc_score\n","def print_scores(y_test,pred):\n","  cm = confusion_matrix(y_test, pred)\n","  roc = roc_auc_score(y_test,pred)\n","  acc = accuracy_score(y_test,pred)\n","  pre = precision_score(y_test,pred)\n","  f1 = f1_score(y_test,pred)\n","  print('~~~~{Confusion}~~~~\\n',cm)\n","  print('\\n~~~~{roc score}~~~~\\n',roc)\n","  print('\\n~~~~{accuracy}~~~~~\\n',acc)\n","  print('\\n~~~~{precision}~~~~\\n',pre)\n","  print('\\n~~~~{f1  score}~~~~\\n',f1)\n","print_scores(y_test,pred)"]},{"cell_type":"markdown","source":["# Naive Bayes"],"metadata":{"id":"HfBMtgqcejSt"}},{"cell_type":"code","source":["from sklearn.naive_bayes import MultinomialNB\n","mnb = MultinomialNB()\n","mnb.fit(X_train,y_train)\n","pred = mnb.predict(X_test)\n","print_scores(y_test,pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NwnHmLS4aicP","executionInfo":{"status":"ok","timestamp":1678766442952,"user_tz":420,"elapsed":309,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"8bdcee6d-cdb9-4735-8e9d-9f8cb3deac1b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["~~~~{Confusion}~~~~\n"," [[58008  5704]\n"," [24572 12788]]\n","\n","~~~~{roc score}~~~~\n"," 0.6263816725586336\n","\n","~~~~{accuracy}~~~~~\n"," 0.7004511635269907\n","\n","~~~~{precision}~~~~\n"," 0.6915422885572139\n","\n","~~~~{f1  score}~~~~\n"," 0.4579245147890854\n"]}]},{"cell_type":"code","source":["# We'll do a quick grid search because it fits so fast\n","from sklearn.model_selection import GridSearchCV\n","param_grid = {\n","    'alpha': [0.01,0.005,0.2,0.05,0.1,0.001],\n","    'fit_prior': [True, False],\n","    'class_prior': [None, [0.1, 0.2], [0.8, 0.2]]\n","}\n","\n","mnb = MultinomialNB()\n","gs = GridSearchCV(mnb, param_grid, cv=5, n_jobs=-1)\n","gs.fit(X, Y)\n","print('params', gs.best_params_)\n","print('score', gs.best_score_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G8ofHKYNfK0P","executionInfo":{"status":"ok","timestamp":1678766470877,"user_tz":420,"elapsed":27926,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"bb753746-d8b3-4ec5-aa7e-1c9bacc0c4c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["params {'alpha': 0.2, 'class_prior': None, 'fit_prior': True}\n","score 0.7012518322095492\n"]}]},{"cell_type":"markdown","source":["# LSTM"],"metadata":{"id":"kG5dj1CnhCC-"}},{"cell_type":"code","source":["X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5R98islRhXUd","executionInfo":{"status":"ok","timestamp":1678766470878,"user_tz":420,"elapsed":10,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"d1452411-d178-4aab-84ba-6003ef2fd070"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(404287, 1000)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, LSTM,\n","\n","model = Sequential()\n","model.add(LSTM(10, dropout=0.2, recurrent_dropout=0.2,input_shape = (X_train.shape[1],1),return_sequences=True))\n","model.add(LSTM(20, dropout=0.2, recurrent_dropout=0.2,return_sequences=True))\n","model.add(LSTM(30, dropout=0.2, recurrent_dropout=0.2))\n","model.add(Dense(2, activation='softmax'))\n","\n","model.compile(loss='SparseCategoricalCrossentropy', optimizer='adam', metrics=['accuracy'])\n","\n"],"metadata":{"id":"Ff3sC7jthRpi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Johnathan and I have been struggling to feed something into this that it won't spit out. I found this stackoverflow question that seems to work."],"metadata":{"id":"ik2ugf1HMIPL"}},{"cell_type":"code","source":["from sklearn.decomposition import TruncatedSVD"],"metadata":{"id":"OEzdTtEHxUoq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["svd = TruncatedSVD(250)\n","# 250 components is a massive increase in evr from 100 while not using too much more ram"],"metadata":{"id":"4Mefzc2g55Lz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Xpca = svd.fit_transform(X)"],"metadata":{"id":"sVTbMgET57cU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["svd.explained_variance_ratio_.sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tesFsNLt7eE5","executionInfo":{"status":"ok","timestamp":1678766622136,"user_tz":420,"elapsed":148,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"415a8a38-4893-4aa5-8e34-3e3a00ef2056"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5527787820539418"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(Xpca, Y)"],"metadata":{"id":"JS_Se18q6vjy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.fit(X_train, y_train, batch_size=512, epochs=5, validation_data=(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JgbJxr7Eh7NQ","executionInfo":{"status":"ok","timestamp":1678776481452,"user_tz":420,"elapsed":6503203,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"807c0f41-234b-455b-876d-b08c8443ccda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","593/593 [==============================] - 1309s 2s/step - loss: 0.6591 - accuracy: 0.6302 - val_loss: 0.6575 - val_accuracy: 0.6326\n","Epoch 2/5\n","593/593 [==============================] - 1293s 2s/step - loss: 0.6589 - accuracy: 0.6302 - val_loss: 0.6574 - val_accuracy: 0.6326\n","Epoch 3/5\n","593/593 [==============================] - 1297s 2s/step - loss: 0.6587 - accuracy: 0.6302 - val_loss: 0.6574 - val_accuracy: 0.6326\n","Epoch 4/5\n","593/593 [==============================] - 1296s 2s/step - loss: 0.6585 - accuracy: 0.6302 - val_loss: 0.6570 - val_accuracy: 0.6326\n","Epoch 5/5\n","593/593 [==============================] - 1295s 2s/step - loss: 0.6580 - accuracy: 0.6302 - val_loss: 0.6546 - val_accuracy: 0.6326\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa663256880>"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["pred = model.predict(X_test)\n","print_scores(y_test,pred)"],"metadata":{"id":"aj3mWsZMOXgo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print_scores(y_test,np.argmax(pred,axis=1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wtybn5gCOdEX","executionInfo":{"status":"ok","timestamp":1678776892025,"user_tz":420,"elapsed":282,"user":{"displayName":"Malcolm ,","userId":"14231275788354146983"}},"outputId":"c37309e4-cd7d-4ee5-d70f-3e8407d985eb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["~~~~{Confusion}~~~~\n"," [[63938     0]\n"," [37134     0]]\n","\n","~~~~{roc score}~~~~\n"," 0.5\n","\n","~~~~{accuracy}~~~~~\n"," 0.6325985436124743\n","\n","~~~~{precision}~~~~\n"," 0.0\n","\n","~~~~{f1  score}~~~~\n"," 0.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"markdown","source":["Our previous simpler NN was better. This one has no idea what's going on and guesses Negative every time."],"metadata":{"id":"r32K-3DISa1T"}},{"cell_type":"code","source":[],"metadata":{"id":"4nmMX3_mSgC1"},"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"colab":{"provenance":[]},"gpuClass":"standard","accelerator":"TPU"},"nbformat":4,"nbformat_minor":0}
